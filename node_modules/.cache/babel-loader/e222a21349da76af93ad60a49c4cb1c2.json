{"ast":null,"code":"import firebase from \"firebase\";\nconst config = {\n  apiKey: \"AIzaSyAwhuNXcnO9rY3y2JcnVp-uE_u4LgpARcw\",\n  authDomain: \"exam-alteration.firebaseapp.com\",\n  databaseURL: \"https://exam-alteration-default-rtdb.firebaseio.com\",\n  projectId: \"exam-alteration\",\n  storageBucket: \"exam-alteration.appspot.com\",\n  messagingSenderId: \"804395169160\",\n  appId: \"1:804395169160:web:c68e21284c352f0584b63d\",\n  measurementId: \"G-MHRZL7YPR9\"\n}; //import firebase from \"firebase\";\n//const firebaseApp =firebase.initializeApp({\n//});\n\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const db = firebase.firestore();\nconst googleProvider = new firebase.auth.GoogleAuthProvider();\n\nfunction googleSignInPopup(provider) {\n  // [START auth_google_signin_popup]\n  firebase.auth().signInWithPopup(provider).then(result => {\n    /** @type {firebase.auth.OAuthCredential} */\n    var credential = result.credential; // This gives you a Google Access Token. You can use it to access the Google API.\n\n    var token = credential.accessToken; // The signed-in user info.\n\n    var user = result.user; // ...\n  }).catch(error => {\n    // Handle Errors here.\n    var errorCode = error.code;\n    var errorMessage = error.message; // The email of the user's account used.\n\n    var email = error.email; // The firebase.auth.AuthCredential type that was used.\n\n    var credential = error.credential; // ...\n  }); // [END auth_google_signin_popup]\n}\n\nfunction googleSignInRedirectResult() {\n  // [START auth_google_signin_redirect_result]\n  firebase.auth().getRedirectResult().then(result => {\n    if (result.credential) {\n      /** @type {firebase.auth.OAuthCredential} */\n      var credential = result.credential; // This gives you a Google Access Token. You can use it to access the Google API.\n\n      var token = credential.accessToken; // ...\n    } // The signed-in user info.\n\n\n    var user = result.user;\n  }).catch(error => {\n    // Handle Errors here.\n    var errorCode = error.code;\n    var errorMessage = error.message; // The email of the user's account used.\n\n    var email = error.email; // The firebase.auth.AuthCredential type that was used.\n\n    var credential = error.credential; // ...\n  }); // [END auth_google_signin_redirect_result]\n}\n\nfunction googleBuildAndSignIn(id_token) {\n  // [START auth_google_build_signin]\n  // Build Firebase credential with the Google ID token.\n  var credential = firebase.auth.GoogleAuthProvider.credential(id_token); // Sign in with credential from the Google user.\n\n  firebase.auth().signInWithCredential(credential).catch(error => {\n    // Handle Errors here.\n    var errorCode = error.code;\n    var errorMessage = error.message; // The email of the user's account used.\n\n    var email = error.email; // The firebase.auth.AuthCredential type that was used.\n\n    var credential = error.credential; // ...\n  }); // [END auth_google_build_signin]\n}\n\nfunction onSignIn(googleUser) {\n  console.log('Google Auth Response', googleUser); // We need to register an Observer on Firebase Auth to make sure auth is initialized.\n\n  var unsubscribe = firebase.auth().onAuthStateChanged(firebaseUser => {\n    unsubscribe(); // Check if we are already signed-in Firebase with the correct user.\n\n    if (!isUserEqual(googleUser, firebaseUser)) {\n      // Build Firebase credential with the Google ID token.\n      var credential = firebase.auth.GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token); // Sign in with credential from the Google user.\n      // [START auth_google_signin_credential]\n\n      firebase.auth().signInWithCredential(credential).catch(error => {\n        // Handle Errors here.\n        var errorCode = error.code;\n        var errorMessage = error.message; // The email of the user's account used.\n\n        var email = error.email; // The firebase.auth.AuthCredential type that was used.\n\n        var credential = error.credential; // ...\n      }); // [END auth_google_signin_credential]\n    } else {\n      console.log('User already signed-in Firebase.');\n    }\n  });\n}\n\nfunction isUserEqual(googleUser, firebaseUser) {\n  if (firebaseUser) {\n    var providerData = firebaseUser.providerData;\n\n    for (var i = 0; i < providerData.length; i++) {\n      if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID && providerData[i].uid === googleUser.getBasicProfile().getId()) {\n        // We don't need to reauth the Firebase connection.\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nexport default firebase;","map":{"version":3,"sources":["C:/Users/HRIDHI SETHI/Documents/exam-alteration-helper/src/firebase.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","auth","db","firestore","googleProvider","GoogleAuthProvider","googleSignInPopup","provider","signInWithPopup","then","result","credential","token","accessToken","user","catch","error","errorCode","code","errorMessage","message","email","googleSignInRedirectResult","getRedirectResult","googleBuildAndSignIn","id_token","signInWithCredential","onSignIn","googleUser","console","log","unsubscribe","onAuthStateChanged","firebaseUser","isUserEqual","getAuthResponse","providerData","i","length","providerId","PROVIDER_ID","uid","getBasicProfile","getId"],"mappings":"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","sourcesContent":["import firebase from \"firebase\";\r\nconst config ={\r\n    apiKey: \"AIzaSyAwhuNXcnO9rY3y2JcnVp-uE_u4LgpARcw\",\r\n    authDomain: \"exam-alteration.firebaseapp.com\",\r\n    databaseURL: \"https://exam-alteration-default-rtdb.firebaseio.com\",\r\n    projectId: \"exam-alteration\",\r\n    storageBucket: \"exam-alteration.appspot.com\",\r\n    messagingSenderId: \"804395169160\",\r\n    appId: \"1:804395169160:web:c68e21284c352f0584b63d\",\r\n    measurementId: \"G-MHRZL7YPR9\"\r\n};\r\n//import firebase from \"firebase\";\r\n//const firebaseApp =firebase.initializeApp({\r\n//});\r\nfirebase.initializeApp(config);\r\nexport const auth =firebase.auth();\r\nexport const db =firebase.firestore();\r\nconst googleProvider = new firebase.auth.GoogleAuthProvider()\r\nfunction googleSignInPopup(provider) {\r\n  // [START auth_google_signin_popup]\r\n  firebase.auth()\r\n    .signInWithPopup(provider)\r\n    .then((result) => {\r\n      /** @type {firebase.auth.OAuthCredential} */\r\n      var credential = result.credential;\r\n\r\n      // This gives you a Google Access Token. You can use it to access the Google API.\r\n      var token = credential.accessToken;\r\n      // The signed-in user info.\r\n      var user = result.user;\r\n      // ...\r\n    }).catch((error) => {\r\n      // Handle Errors here.\r\n      var errorCode = error.code;\r\n      var errorMessage = error.message;\r\n      // The email of the user's account used.\r\n      var email = error.email;\r\n      // The firebase.auth.AuthCredential type that was used.\r\n      var credential = error.credential;\r\n      // ...\r\n    });\r\n  // [END auth_google_signin_popup]\r\n}\r\n\r\nfunction googleSignInRedirectResult() {\r\n  // [START auth_google_signin_redirect_result]\r\n  firebase.auth()\r\n    .getRedirectResult()\r\n    .then((result) => {\r\n      if (result.credential) {\r\n        /** @type {firebase.auth.OAuthCredential} */\r\n        var credential = result.credential;\r\n\r\n        // This gives you a Google Access Token. You can use it to access the Google API.\r\n        var token = credential.accessToken;\r\n        // ...\r\n      }\r\n      // The signed-in user info.\r\n      var user = result.user;\r\n    }).catch((error) => {\r\n      // Handle Errors here.\r\n      var errorCode = error.code;\r\n      var errorMessage = error.message;\r\n      // The email of the user's account used.\r\n      var email = error.email;\r\n      // The firebase.auth.AuthCredential type that was used.\r\n      var credential = error.credential;\r\n      // ...\r\n    });\r\n  // [END auth_google_signin_redirect_result]\r\n}\r\n\r\nfunction googleBuildAndSignIn(id_token) {\r\n  // [START auth_google_build_signin]\r\n  // Build Firebase credential with the Google ID token.\r\n  var credential = firebase.auth.GoogleAuthProvider.credential(id_token);\r\n\r\n  // Sign in with credential from the Google user.\r\n  firebase.auth().signInWithCredential(credential).catch((error) => {\r\n    // Handle Errors here.\r\n    var errorCode = error.code;\r\n    var errorMessage = error.message;\r\n    // The email of the user's account used.\r\n    var email = error.email;\r\n    // The firebase.auth.AuthCredential type that was used.\r\n    var credential = error.credential;\r\n    // ...\r\n  });\r\n  // [END auth_google_build_signin]\r\n}\r\n\r\nfunction onSignIn(googleUser) {\r\n  console.log('Google Auth Response', googleUser);\r\n  // We need to register an Observer on Firebase Auth to make sure auth is initialized.\r\n  var unsubscribe = firebase.auth().onAuthStateChanged((firebaseUser) => {\r\n    unsubscribe();\r\n    // Check if we are already signed-in Firebase with the correct user.\r\n    if (!isUserEqual(googleUser, firebaseUser)) {\r\n      // Build Firebase credential with the Google ID token.\r\n      var credential = firebase.auth.GoogleAuthProvider.credential(\r\n          googleUser.getAuthResponse().id_token);\r\n  \r\n      // Sign in with credential from the Google user.\r\n      // [START auth_google_signin_credential]\r\n      firebase.auth().signInWithCredential(credential).catch((error) => {\r\n        // Handle Errors here.\r\n        var errorCode = error.code;\r\n        var errorMessage = error.message;\r\n        // The email of the user's account used.\r\n        var email = error.email;\r\n        // The firebase.auth.AuthCredential type that was used.\r\n        var credential = error.credential;\r\n        // ...\r\n      });\r\n      // [END auth_google_signin_credential]\r\n    } else {\r\n      console.log('User already signed-in Firebase.');\r\n    }\r\n  });\r\n}\r\n\r\nfunction isUserEqual(googleUser, firebaseUser) {\r\n  if (firebaseUser) {\r\n    var providerData = firebaseUser.providerData;\r\n    for (var i = 0; i < providerData.length; i++) {\r\n      if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID &&\r\n          providerData[i].uid === googleUser.getBasicProfile().getId()) {\r\n        // We don't need to reauth the Firebase connection.\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nexport default firebase;"]},"metadata":{},"sourceType":"module"}