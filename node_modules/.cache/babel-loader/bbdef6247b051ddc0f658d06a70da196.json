{"ast":null,"code":"// These samples are intended for Web so this import would normally be\n// done in HTML however using modules here is more convenient for\n// ensuring sample correctness offline.\nimport './App.css';\nimport React, { Component } from 'react';\nimport { Navbar, Nav, Form, Table, Carousel, Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\"; // Docs: https://source.corp.google.com/piper///depot/google3/third_party/devsite/firebase/en/docs/auth/web/google-signin.md\n\nfunction googleProvider() {\n  // [START auth_google_provider_create]\n  var provider = new firebase.auth.GoogleAuthProvider(); // [END auth_google_provider_create]\n  // [START auth_google_provider_scopes]\n\n  provider.addScope('https://www.googleapis.com/auth/contacts.readonly'); // [END auth_google_provider_scopes]\n  // [START auth_google_provider_params]\n\n  provider.setCustomParameters({\n    'login_hint': 'user@example.com'\n  }); // [END auth_google_provider_params]\n}\n\nfunction googleSignInPopup(provider) {\n  // [START auth_google_signin_popup]\n  firebase.auth().signInWithPopup(provider).then(result => {\n    /** @type {firebase.auth.OAuthCredential} */\n    var credential = result.credential; // This gives you a Google Access Token. You can use it to access the Google API.\n\n    var token = credential.accessToken; // The signed-in user info.\n\n    var user = result.user; // ...\n  }).catch(error => {\n    // Handle Errors here.\n    var errorCode = error.code;\n    var errorMessage = error.message; // The email of the user's account used.\n\n    var email = error.email; // The firebase.auth.AuthCredential type that was used.\n\n    var credential = error.credential; // ...\n  }); // [END auth_google_signin_popup]\n}\n\nfunction googleSignInRedirectResult() {\n  // [START auth_google_signin_redirect_result]\n  firebase.auth().getRedirectResult().then(result => {\n    if (result.credential) {\n      /** @type {firebase.auth.OAuthCredential} */\n      var credential = result.credential; // This gives you a Google Access Token. You can use it to access the Google API.\n\n      var token = credential.accessToken; // ...\n    } // The signed-in user info.\n\n\n    var user = result.user;\n  }).catch(error => {\n    // Handle Errors here.\n    var errorCode = error.code;\n    var errorMessage = error.message; // The email of the user's account used.\n\n    var email = error.email; // The firebase.auth.AuthCredential type that was used.\n\n    var credential = error.credential; // ...\n  }); // [END auth_google_signin_redirect_result]\n}\n\nfunction googleBuildAndSignIn(id_token) {\n  // [START auth_google_build_signin]\n  // Build Firebase credential with the Google ID token.\n  var credential = firebase.auth.GoogleAuthProvider.credential(id_token); // Sign in with credential from the Google user.\n\n  firebase.auth().signInWithCredential(credential).catch(error => {\n    // Handle Errors here.\n    var errorCode = error.code;\n    var errorMessage = error.message; // The email of the user's account used.\n\n    var email = error.email; // The firebase.auth.AuthCredential type that was used.\n\n    var credential = error.credential; // ...\n  }); // [END auth_google_build_signin]\n} // [START auth_google_callback]\n\n\nfunction onSignIn(googleUser) {\n  console.log('Google Auth Response', googleUser); // We need to register an Observer on Firebase Auth to make sure auth is initialized.\n\n  var unsubscribe = firebase.auth().onAuthStateChanged(firebaseUser => {\n    unsubscribe(); // Check if we are already signed-in Firebase with the correct user.\n\n    if (!isUserEqual(googleUser, firebaseUser)) {\n      // Build Firebase credential with the Google ID token.\n      var credential = firebase.auth.GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token); // Sign in with credential from the Google user.\n      // [START auth_google_signin_credential]\n\n      firebase.auth().signInWithCredential(credential).catch(error => {\n        // Handle Errors here.\n        var errorCode = error.code;\n        var errorMessage = error.message; // The email of the user's account used.\n\n        var email = error.email; // The firebase.auth.AuthCredential type that was used.\n\n        var credential = error.credential; // ...\n      }); // [END auth_google_signin_credential]\n    } else {\n      console.log('User already signed-in Firebase.');\n    }\n  });\n} // [END auth_google_callback]\n// [START auth_google_checksameuser]\n\n\nfunction isUserEqual(googleUser, firebaseUser) {\n  if (firebaseUser) {\n    var providerData = firebaseUser.providerData;\n\n    for (var i = 0; i < providerData.length; i++) {\n      if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID && providerData[i].uid === googleUser.getBasicProfile().getId()) {\n        // We don't need to reauth the Firebase connection.\n        return true;\n      }\n    }\n  }\n\n  return false;\n} // [END auth_google_checksameuser]\n\n\nexport default googleProvider;","map":{"version":3,"sources":["C:/Users/HRIDHI SETHI/Documents/exam-alteration-helper/src/App.js"],"names":["React","Component","Navbar","Nav","Form","Table","Carousel","Button","firebase","googleProvider","provider","auth","GoogleAuthProvider","addScope","setCustomParameters","googleSignInPopup","signInWithPopup","then","result","credential","token","accessToken","user","catch","error","errorCode","code","errorMessage","message","email","googleSignInRedirectResult","getRedirectResult","googleBuildAndSignIn","id_token","signInWithCredential","onSignIn","googleUser","console","log","unsubscribe","onAuthStateChanged","firebaseUser","isUserEqual","getAuthResponse","providerData","i","length","providerId","PROVIDER_ID","uid","getBasicProfile","getId"],"mappings":"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","sourcesContent":["\n// These samples are intended for Web so this import would normally be\n// done in HTML however using modules here is more convenient for\n// ensuring sample correctness offline.\nimport './App.css';\nimport React, { Component } from 'react';\nimport { Navbar,Nav,Form,Table,Carousel,Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\n// Docs: https://source.corp.google.com/piper///depot/google3/third_party/devsite/firebase/en/docs/auth/web/google-signin.md\n\nfunction googleProvider() {\n  // [START auth_google_provider_create]\n  var provider = new firebase.auth.GoogleAuthProvider();\n  // [END auth_google_provider_create]\n\n  // [START auth_google_provider_scopes]\n  provider.addScope('https://www.googleapis.com/auth/contacts.readonly');\n  // [END auth_google_provider_scopes]\n  \n  // [START auth_google_provider_params]\n  provider.setCustomParameters({\n    'login_hint': 'user@example.com'\n  });\n  // [END auth_google_provider_params]\n}\n\nfunction googleSignInPopup(provider) {\n  // [START auth_google_signin_popup]\n  firebase.auth()\n    .signInWithPopup(provider)\n    .then((result) => {\n      /** @type {firebase.auth.OAuthCredential} */\n      var credential = result.credential;\n\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      var token = credential.accessToken;\n      // The signed-in user info.\n      var user = result.user;\n      // ...\n    }).catch((error) => {\n      // Handle Errors here.\n      var errorCode = error.code;\n      var errorMessage = error.message;\n      // The email of the user's account used.\n      var email = error.email;\n      // The firebase.auth.AuthCredential type that was used.\n      var credential = error.credential;\n      // ...\n    });\n  // [END auth_google_signin_popup]\n}\n\nfunction googleSignInRedirectResult() {\n  // [START auth_google_signin_redirect_result]\n  firebase.auth()\n    .getRedirectResult()\n    .then((result) => {\n      if (result.credential) {\n        /** @type {firebase.auth.OAuthCredential} */\n        var credential = result.credential;\n\n        // This gives you a Google Access Token. You can use it to access the Google API.\n        var token = credential.accessToken;\n        // ...\n      }\n      // The signed-in user info.\n      var user = result.user;\n    }).catch((error) => {\n      // Handle Errors here.\n      var errorCode = error.code;\n      var errorMessage = error.message;\n      // The email of the user's account used.\n      var email = error.email;\n      // The firebase.auth.AuthCredential type that was used.\n      var credential = error.credential;\n      // ...\n    });\n  // [END auth_google_signin_redirect_result]\n}\n\nfunction googleBuildAndSignIn(id_token) {\n  // [START auth_google_build_signin]\n  // Build Firebase credential with the Google ID token.\n  var credential = firebase.auth.GoogleAuthProvider.credential(id_token);\n\n  // Sign in with credential from the Google user.\n  firebase.auth().signInWithCredential(credential).catch((error) => {\n    // Handle Errors here.\n    var errorCode = error.code;\n    var errorMessage = error.message;\n    // The email of the user's account used.\n    var email = error.email;\n    // The firebase.auth.AuthCredential type that was used.\n    var credential = error.credential;\n    // ...\n  });\n  // [END auth_google_build_signin]\n}\n\n// [START auth_google_callback]\nfunction onSignIn(googleUser) {\n  console.log('Google Auth Response', googleUser);\n  // We need to register an Observer on Firebase Auth to make sure auth is initialized.\n  var unsubscribe = firebase.auth().onAuthStateChanged((firebaseUser) => {\n    unsubscribe();\n    // Check if we are already signed-in Firebase with the correct user.\n    if (!isUserEqual(googleUser, firebaseUser)) {\n      // Build Firebase credential with the Google ID token.\n      var credential = firebase.auth.GoogleAuthProvider.credential(\n          googleUser.getAuthResponse().id_token);\n  \n      // Sign in with credential from the Google user.\n      // [START auth_google_signin_credential]\n      firebase.auth().signInWithCredential(credential).catch((error) => {\n        // Handle Errors here.\n        var errorCode = error.code;\n        var errorMessage = error.message;\n        // The email of the user's account used.\n        var email = error.email;\n        // The firebase.auth.AuthCredential type that was used.\n        var credential = error.credential;\n        // ...\n      });\n      // [END auth_google_signin_credential]\n    } else {\n      console.log('User already signed-in Firebase.');\n    }\n  });\n}\n// [END auth_google_callback]\n\n// [START auth_google_checksameuser]\nfunction isUserEqual(googleUser, firebaseUser) {\n  if (firebaseUser) {\n    var providerData = firebaseUser.providerData;\n    for (var i = 0; i < providerData.length; i++) {\n      if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID &&\n          providerData[i].uid === googleUser.getBasicProfile().getId()) {\n        // We don't need to reauth the Firebase connection.\n        return true;\n      }\n    }\n  }\n  return false;\n}\n// [END auth_google_checksameuser]\nexport default googleProvider;"]},"metadata":{},"sourceType":"module"}